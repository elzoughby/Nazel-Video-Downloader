import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;


public class DatabaseManager {

    private static Connection connection;



    public static void initialize() {

        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:nvddb.db");
        } catch (ClassNotFoundException e) {
            new MessageDialog("Database driver not found! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        } catch (SQLException e) {
            new MessageDialog("Database connection error! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }

    }

    public static void load() {

        try {
            ResultSet resultSet = connection.createStatement().executeQuery("select * from items");

            while(resultSet.next()) {
                Item item = new Item();
                item.setId( resultSet.getInt("id") );
                item.setTitle( resultSet.getString("title") );
                item.setUrl( resultSet.getString("url") );
                item.setLocation( resultSet.getString("location") );
                item.setCustomName( resultSet.getString("customName") );
                item.setSpeedLimit( resultSet.getInt("speedLimit") );
                item.setIsAddedToQueue( resultSet.getBoolean("addToQueue") );
                item.setIsVideo( resultSet.getBoolean("isVideo") );
                item.setFormat( resultSet.getString("format") );
                item.setVideoQuality( resultSet.getInt("videoQuality") );
                item.setAudioQuality( resultSet.getInt("audioQuality") );
                item.setSubtitleLanguage( resultSet.getString("subtitleLanguage") );
                item.setNeedEmbeddedSubtitle( resultSet.getBoolean("embeddedSubtitle") );
                item.setNeedAutoGeneratedSubtitle( resultSet.getBoolean("autoGeneratedSubtitle") );
                item.setIsPlaylist( resultSet.getBoolean("isPlaylist") );
                item.setPlaylistStartIndex( resultSet.getInt("startIndex") );
                item.setPlaylistEndIndex( resultSet.getInt("endIndex") );
                item.setPlaylistItems( resultSet.getString("items") );
                item.setNeedAllPlaylistItems( resultSet.getBoolean("allItems") );
                item.setDone( resultSet.getDouble("done") );
                item.setSize( resultSet.getString("size") );

                if (item.getDone() == 100.0)
                    item.setStatus("Finished");
                else
                    item.setStatus("Stopped");

                if (item.getIsAddedToQueue())
                    HomeController.getQueueItemList().add(item);
                else
                    HomeController.getItemList().add(item);
            }

        } catch (SQLException e) {
            new MessageDialog("Error loading database! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }

    }

    public static void insert(Item item) {

        try {
            String sqlCommand = String.format("INSERT INTO items (id,url,location,title,customName,speedLimit," +
                            "addToQueue,isVideo,format,videoQuality,audioQuality,subtitleLanguage,embeddedSubtitle," +
                            "autoGeneratedSubtitle,isPlaylist,startIndex,endIndex,items,allItems,done,size) " +
                            "VALUES (%d, '%s', '%s', '%s', '%s', %d, '%b', '%b', '%s', %d, %d, '%s', '%b', '%b', " +
                            " '%b', %d, %d, '%s', '%b', %f, '%s') ",
                    item.getId(), item.getUrl(), item.getLocation(), item.getTitle(), item.getCustomName(), item.getSpeedLimit(),
                    item.getIsAddedToQueue(), item.getIsVideo(), item.getFormat(), item.getVideoQuality(), item.getAudioQuality(),
                    item.getSubtitleLanguage(), item.getNeedEmbeddedSubtitle(), item.getNeedAutoGeneratedSubtitle(), item.getIsPlaylist(),
                    item.getPlaylistStartIndex(), item.getPlaylistEndIndex(), item.getPlaylistItems(), item.getNeedAllPlaylistItems(),
                    item.getDone(), item.getSize());

            connection.createStatement().executeUpdate(sqlCommand);
        } catch (SQLException e) {
            new MessageDialog("Error inserting item to database! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }

    }

    public static void delete(Item item) {

        try {
            String sqlCommand = String.format("DELETE FROM items WHERE id = %d", item.getId());
            connection.createStatement().executeUpdate(sqlCommand);
        } catch (SQLException e) {
            new MessageDialog("Error deleting item from database! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }

    }

    public static void updateDouble(Item item, String columnLabel, double value) {

        try {
            String sqlCommand = String.format("UPDATE items SET %s = %f WHERE id = %d", columnLabel, value, item.getId());
            connection.createStatement().executeUpdate(sqlCommand);
        } catch (SQLException e) {
            new MessageDialog("Error updating done value in database! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }

    }

    public static void updateString(Item item, String columnLabel, String value) {

        try {
            String sqlCommand = String.format("UPDATE items SET %s = '%s' WHERE id = %d", columnLabel, value, item.getId());
            connection.createStatement().executeUpdate(sqlCommand);
        } catch (SQLException e) {
            new MessageDialog("Error updating title in database! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }

    }

    // It is buggy
    public static int getNextId() {

        try {
            ResultSet resultSet = connection.createStatement().executeQuery("SELECT COUNT(*) FROM items");
            return resultSet.getInt(1);
        } catch (SQLException e) {
            new MessageDialog("Error getting last row id from database! \n" +
                    "Restart program and try again.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
            return 0;
        }

    }

    public static void closeConnection() {

        try {
            if (!connection.isClosed())
                connection.close();
        } catch (NullPointerException n) {
            System.out.println("Database connection was not successful!");
        } catch (SQLException e) {
            new MessageDialog("Error closing database connection! \n" +
                    "some data might not be saved.", MessageDialog.Type.ERROR,
                    MessageDialog.Buttons.CLOSE).createErrorDialog(e.getStackTrace()).showAndWait();
        }
    }

}
